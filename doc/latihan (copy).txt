procedure CopyStack(input Sin: Stack, output Sout: Stack)
{ Membuat salinan Sin }
{ I.S. Sin terdefinisi, Sout sembarang }
{ F.S. Sout berisi salinan Sin yang identik }
    KAMUS
    i: integer,

    ALGORITMA
    { Memastikan Sout kosong}
    CreateEmmpty(Sout)

    { Memasukkan Sin ke Sout}
    i <- 0
    while (i <= Sin.TOP)
        Push(Sout, Sin.T[i] )
        i <- i + 1

procedure InverseStack(input/output S: Stack)
{ Membalik isi suatu stack }
{ I.S. S terdefinisi }
{ F.S. Isi S terbalik dari posisi semula }
    KAMUS
    SCopy: Stack
    i: integer

    ALGORITMA
    CopyStack(S, SCopy)

    { Memastikan S kosong }
    CreateEmpty(S)

    i <- TOP
    while (i >= 0) do
        Push(S, SCopy.T[i] )
        i <- i - 1

function MergeStack(S1,S2: Stack) → Stack
{ Menghasilkan sebuah stack yang merupakan hasil penggabungan S1
dengan S2 dengan S1 berada di posisi lebih “bawah”. Urutan kedua
stack harus sama seperti aslinya. }
{ Stack baru diisi sampai seluruh elemen S1 dan S2 masuk ke dalam
stack, atau jika stack baru sudah penuh, maka elemen yang
dimasukkan adalah secukupnya yang dapat ditampung. }
    KAMUS
    i: integer

    ALGORITMA
    i <- 0
    while (i <= TOP) do
        Push(S1, S2.T[i] )
        i <- i + 1

    -> S1

Program EVALUASI EKSPRESI Aritmatika
    StackOfKata: <
